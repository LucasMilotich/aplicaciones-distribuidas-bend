{"version":3,"sources":["../../src/controllers/userController.js"],"names":["errorBuilder","require","UserController","req","res","next","username","body","password","mongo","Mongo","save","then","elem","console","log","send","new_password","update","err","get"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA5B;;IAGqBC,c;;;AAEjB,4BAAc;AAAA;AAGb;;;;6BAEQC,G,EAAKC,G,EAAKC,I,EAAK;AACpB,UAAIC,QAAQ,GAAGH,GAAG,CAACI,IAAJ,CAASD,QAAxB;AACA,UAAIE,QAAQ,GAAGL,GAAG,CAACI,IAAJ,CAASC,QAAxB;AAEA,UAAIC,KAAK,GAAG,IAAIC,iBAAJ,EAAZ;AAEAD,MAAAA,KAAK,CAACE,IAAN,CAAW,OAAX,EAAoB;AAAEL,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBE,QAAAA,QAAQ,EAAEA;AAAhC,OAApB,EAAgEI,IAAhE,CAAqE,UAAAC,IAAI,EAAI;AACzEC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,YAAIA,IAAI,IAAI,IAAZ,EAAkB;AACdT,UAAAA,GAAG,CAACY,IAAJ,CAAShB,YAAY,CAAC,gBAAD,EAAmB,GAAnB,EAAwB,WAAxB,CAArB;AACH,SAFD,MAEO;AACHI,UAAAA,GAAG,CAACY,IAAJ,CAASH,IAAT;AACH;AAEJ,OARD;AASH;;;mCAEcV,G,EAAKC,G,EAAKC,I,EAAK;AAE1B,UAAIC,QAAQ,GAAGH,GAAG,CAACI,IAAJ,CAASD,QAAxB;AACA,UAAIE,QAAQ,GAAGL,GAAG,CAACI,IAAJ,CAASU,YAAxB;AAEA,UAAIR,KAAK,GAAG,IAAIC,iBAAJ,EAAZ;AAEAD,MAAAA,KAAK,CAACS,MAAN,CAAa,OAAb,EAAsB;AAACZ,QAAAA,QAAQ,EAAEA;AAAX,OAAtB,EAA4C;AAAEA,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBE,QAAAA,QAAQ,EAAEA;AAAhC,OAA5C,EAAwFI,IAAxF,CAA6F,UAAAC,IAAI,EAAI;AAEjG,YAAIA,IAAI,IAAI,IAAZ,EAAkB;AACdT,UAAAA,GAAG,CAACY,IAAJ,CAAShB,YAAY,CAAC,6BAAD,EAAgC,GAAhC,EAAqC,WAArC,CAArB;AACH,SAFD,MAEO;AACHI,UAAAA,GAAG,CAACY,IAAJ,CAASH,IAAT;AACH;AAEJ,OARD,WAQS,UAAAM,GAAG;AAAA,eAAIf,GAAG,CAACY,IAAJ,CAAShB,YAAY,CAACmB,GAAD,EAAM,GAAN,EAAW,gBAAX,CAArB,CAAJ;AAAA,OARZ;AAUH;;;0BAEKhB,G,EAAKC,G,EAAKC,I,EAAM;AAElB,UAAIC,QAAQ,GAAGH,GAAG,CAACI,IAAJ,CAASD,QAAxB;AACA,UAAIE,QAAQ,GAAGL,GAAG,CAACI,IAAJ,CAASC,QAAxB;AAEA,UAAIC,KAAK,GAAG,IAAIC,iBAAJ,EAAZ;AAEAD,MAAAA,KAAK,CAACW,GAAN,CAAU,OAAV,EAAmB;AAAEd,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBE,QAAAA,QAAQ,EAAEA;AAAhC,OAAnB,EAA+DI,IAA/D,CAAoE,UAAAC,IAAI,EAAI;AAExE,YAAIA,IAAI,IAAI,IAAZ,EAAkB;AACdT,UAAAA,GAAG,CAACY,IAAJ,CAAShB,YAAY,CAAC,gBAAD,EAAmB,GAAnB,EAAwB,WAAxB,CAArB;AACH,SAFD,MAEO;AACHI,UAAAA,GAAG,CAACY,IAAJ,CAASH,IAAT;AACH;AAEJ,OARD,WAQS,UAAAM,GAAG;AAAA,eAAIf,GAAG,CAACY,IAAJ,CAAShB,YAAY,CAACmB,GAAD,EAAM,GAAN,EAAW,gBAAX,CAArB,CAAJ;AAAA,OARZ;AAUH","sourcesContent":["import Mongo from '../db/mongo';\n\nconst errorBuilder = require('../domain/error')\n\n\nexport default class UserController {\n\n    constructor() {\n\n\n    }\n\n    register(req, res, next){\n        let username = req.body.username\n        let password = req.body.password\n\n        let mongo = new Mongo()\n        \n        mongo.save(\"users\", { username: username, password: password }).then(elem => {\n            console.log(elem)\n            if (elem == null) {\n                res.send(errorBuilder(\"user not found\", 400, \"not_found\"))\n            } else {\n                res.send(elem)\n            }\n\n        })\n    }\n\n    changePassword(req, res, next){\n\n        let username = req.body.username\n        let password = req.body.new_password\n\n        let mongo = new Mongo()\n\n        mongo.update(\"users\", {username: username}, { username: username, password: password }).then(elem => {\n\n            if (elem == null) {\n                res.send(errorBuilder(\"user cannot change password\", 400, \"not_found\"))\n            } else {\n                res.send(elem)\n            }\n\n        }).catch(err => res.send(errorBuilder(err, 500, \"internal_error\")) )\n\n    }\n\n    login(req, res, next) {\n        \n        let username = req.body.username\n        let password = req.body.password\n\n        let mongo = new Mongo()\n\n        mongo.get(\"users\", { username: username, password: password }).then(elem => {\n\n            if (elem == null) {\n                res.send(errorBuilder(\"user not found\", 400, \"not_found\"))\n            } else {\n                res.send(elem)\n            }\n\n        }).catch(err => res.send(errorBuilder(err, 500, \"internal_error\")) )\n\n    }\n}\n\n\n\n\n"],"file":"userController.js"}