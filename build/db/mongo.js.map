{"version":3,"sources":["../../src/db/mongo.js"],"names":["MongoClient","require","Mongo","Promise","resolve","reject","connect","err","client","console","log","db","collection","query","instance","buildConnection","then","JSON","stringify","findOne","items","find","toArray","result","element","insert","elementToUpdate","newElement","elem","elementToDelete","deleteOne"],"mappings":"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","sourcesContent":["\n\nconst MongoClient = require('mongodb').MongoClient\n\n\nexport default class Mongo {\n\n    buildConnection() {\n\n\n        return new Promise(function (resolve, reject) {\n            MongoClient.connect(\"mongodb+srv://admin:admin@cluster0-rwppz.mongodb.net/test?retryWrites=true&w=majority\", (err, client) => {\n                //MongoClient.connect(\"mongodb://admin:admin@localhost:32772\", (err, client) => {\n                console.log(\"Conectando a mongo\")\n                if (err) return console.log(err)\n                resolve(client.db('test'))\n\n\n            })\n\n        })\n    }\n\n    get(collection, query) {\n\n        let instance = this;\n        return new Promise(function (resolve, reject) {\n            instance.buildConnection().then(db => {\n\n                console.log(\"query to execute\" + JSON.stringify(query))\n                console.log(\"collection \" + collection)\n\n                db.collection(collection).findOne(query, function (err, items) {\n                    if (err)  reject(err);\n                    console.log(items);\n                    resolve(items)\n\n                });\n\n\n            })\n        })\n\n\n    }\n\n    getAll(collection, query) {\n\n        let instance = this;\n        return new Promise(function (resolve, reject) {\n            instance.buildConnection().then(db => {\n\n                console.log(\"query to execute\" + JSON.stringify(query))\n                console.log(\"collection \" + collection)\n\n                db.collection(collection).find(query).toArray(function(err, result) {\n                    if (err) throw err;\n                    console.log(result);\n                    resolve(result)\n                  })\n\n\n            })\n        })\n\n\n    }\n\n    save(collection, element) {\n\n        let instance = this;\n        \n        return new Promise(function (resolve, reject) {\n            instance.buildConnection().then(db => {\n\n                console.log(\"query to execute\" + JSON.stringify(element))\n                console.log(\"collection \" + collection)\n\n                db.collection(collection).insert(element, function (err, items) {\n                    if (err) reject(err);\n                    console.log(element);\n                    resolve(element)\n\n                });\n\n\n            })\n        })\n\n\n    }\n\n    update(collection, elementToUpdate, newElement) {\n\n        \n        let instance = this;\n        \n        return new Promise(function (resolve, reject) {\n            console.log(\"before deleted\")\n            instance.delete(collection, elementToUpdate).then((elem) => {\n                console.log(\"deleted \" + elem)\n                instance.buildConnection().then(db => {\n\n\n                    console.log(\"to update\" + JSON.stringify(newElement))\n                    console.log(\"collection \" + collection)\n                    instance.delete(collection, elementToUpdate).then(()=>{\n                        db.collection(collection).insert(newElement, function (err, items) {\n                            if (err) reject(err);\n                            console.log(newElement);\n                            resolve(newElement)\n        \n                        });\n                    })\n                    \n    \n    \n                })\n            }).catch(err => { console.log(err)})\n            \n            \n        })\n\n    }\n\n\n    delete (collection, elementToDelete){\n        let instance = this;\n        console.log(\"before delete 0 \")\n        return new Promise(function (resolve, reject) {\n            console.log(\"before delete 1 \")\n            instance.buildConnection().then(db => {\n\n                console.log(\"to delete\" + JSON.stringify(elementToDelete))\n                console.log(\"collection \" + collection)\n\n                db.collection(collection).deleteOne(elementToDelete, elementToDelete, function (err, items) {\n                    if (err) reject(err);\n                    console.log(elementToDelete);\n                    resolve(elementToDelete)\n\n                });\n\n\n            })\n        })\n\n\n    }\n\n}\n"],"file":"mongo.js"}