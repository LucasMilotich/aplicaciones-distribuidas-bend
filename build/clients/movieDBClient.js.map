{"version":3,"sources":["../../src/clients/movieDBClient.js"],"names":["api_key","http","require","TheMovieDbClient","path","options","Promise","resolve","reject","req","request","res","chunks","on","chunk","push","body","Buffer","concat","json","JSON","parse","console","log","stringify","results","forEach","element","poster_path","getImage","err","movies","write","end","keyword"],"mappings":"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","sourcesContent":["const api_key = '71a4edb01b7d0d764e48e21bec96f77a'\nvar http = require(\"https\");\n\nexport default class TheMovieDbClient {\n\n   static getImage(path){\n        return \"https://image.tmdb.org/t/p/w200\" + path\n    }\n\n    static discoverMovies() {\n\n        var options = {\n            \"method\": \"GET\",\n            \"hostname\": \"api.themoviedb.org\",\n            \"port\": null,\n            \"path\": \"/3/discover/movie?page=1&include_video=false&include_adult=false&sort_by=popularity.desc&language=en-US&api_key=71a4edb01b7d0d764e48e21bec96f77a\",\n            \"headers\": {}\n        };\n        return new Promise(function(resolve, reject) {\n        var req = http.request(options, function (res) {\n            var chunks = [];\n\n            res.on(\"data\", function (chunk) {\n                chunks.push(chunk);\n            });\n\n            res.on(\"end\", function () {\n                var body = Buffer.concat(chunks);\n                var json = {}\n                try {\n                     json = JSON.parse(body)\n                     console.log(\"el json es: \" + JSON.stringify(json))\n                     json.results.forEach(element => {\n                        element.poster_path = TheMovieDbClient.getImage(element.poster_path)\n                    });\n    \n                    \n                }\n                catch (err){\n                    console.log(\"El error es \" + err)\n                    reject(err)\n                }\n\n                console.log(\"after end\")\n                resolve({movies: json.results});\n                console.log(\"after resolve\")\n            });\n\n            \n        });\n\n        req.on('error', function(err) {\n            // This is not a \"Second reject\", just a different sort of failure\n            console.log(err)\n            reject(err);\n        });\n\n        req.write(\"{}\");\n        req.end();\n    })\n    }\n\n   static  findMovie(keyword){\n        var options = {\n            \"method\": \"GET\",\n            \"hostname\": \"api.themoviedb.org\",\n            \"port\": null,\n            \"path\": `/3/search/movie?include_adult=false&page=1&query=${keyword}&language=en-US&api_key=71a4edb01b7d0d764e48e21bec96f77a`,\n            \"headers\": {}\n          };\n\n          console.log(options)\n\n          return new Promise(function(resolve, reject) {\n          var req = http.request(options, function (res) {\n            var chunks = [];\n          \n            res.on(\"data\", function (chunk) {\n              chunks.push(chunk);\n            });\n          \n            res.on(\"end\", function () {\n                var body = Buffer.concat(chunks);\n                var json \n                try {\n                     json = JSON.parse(body)\n                     console.log(json)\n                     json.results.forEach(element => {\n                        element.poster_path = TheMovieDbClient.getImage(element.poster_path)\n                    });\n    \n                    resolve({movies: json.results});\n                }\n                catch (err){\n                    reject(err)\n                }\n                \n            });\n\n          });\n\n          req.on('error', function(err) {\n            // This is not a \"Second reject\", just a different sort of failure\n            console.log(err)\n            reject(err);\n        });\n          \n          req.write(\"{}\");\n          req.end();\n    }\n    )\n}\n\n}"],"file":"movieDBClient.js"}